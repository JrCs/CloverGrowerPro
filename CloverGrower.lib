#! /bin/bash

# Usefull functions for CloverGrower

function echob() {
	echo $(tput bold)"$1"$(tput sgr0)
}

# Convert argument to lowercase
function lc() {
    echo "$1" | tr '[A-Z]' '[a-z]'
}

function prompt() {
	local default=${2:+[$2]}
	read -p "$1 $default: " answer >&2
	if [[ -z "$answer" && -n "$2" ]]; then
		answer="$2"
	fi
	echo "$answer"
}

function storeConfig() {
    local variable="$1"
    local value="$2"
    [[ -z "$CLOVER_GROWER_CONF" ]] && echob "variable CLOVER_GROWER_CONF not defined !" && exit 1
    egrep -v "^$variable=" "$CLOVER_GROWER_CONF" > "$CLOVER_GROWER_CONF".new
    echo "$variable='$value'" >> "$CLOVER_GROWER_CONF".new
    cat "$CLOVER_GROWER_CONF".new | sort > "$CLOVER_GROWER_CONF" && \
     rm "$CLOVER_GROWER_CONF".new
}

function mountRamDisk() {
    export RAMDISK_MNT_PT="$1"
    dev_ramdisk=$(mount | grep "$RAMDISK_MNT_PT" | awk '{print $1}')
    if [ -z "$dev_ramdisk" ];then
        echo "Creating new RAM disk"
        dev_ramdisk=`hdiutil attach -nomount ram://409600 | awk '{print $1}'`
        echo
        [ -n "$dev_ramdisk" ] && newfs_hfs -v "CloverGrower RamDisk" "$dev_ramdisk" && echo
        [ ! -d "$RAMDISK_MNT_PT" ] && mkdir "$RAMDISK_MNT_PT"
        mount -t hfs "$dev_ramdisk" "$RAMDISK_MNT_PT"

    fi
    # Automatically remove RAMDISK on exit
    trap 'echo; echo "Ejecting RAM disk"; cd "$CLOVER_GROWER_DIR"; umount "$RAMDISK_MNT_PT" && hdiutil detach "$dev_ramdisk"' EXIT
}

function get_hours() {
	starth=$(date "+%k")
	# message Afternoon is longest len so others must have same len also
    # return a string with a length of 9
	if [[ $starth -ge 4	   && $starth -le 12 ]]; then
		hours="Morning"
	elif [[ $starth -ge 12 && $starth -le 17 ]]; then
		hours="Afternoon"
	elif [[ $starth -ge 18 && $starth -le 21 ]]; then
		hours="Evening"
	else
		hours="Night"
	fi
	printf "%-9s" $hours # 9 chars long
}

# Simple check return value function
function checkit(){
	return_val=$?
	local msg="$1"
	local error_msg="${2:-}"
	if [[ "${return_val}" -eq 0 ]]; then
		echob "$msg OK"
        return $return_val
	else
		echob "$msg $error_msg ERROR!!"
		exit $return_val
	fi
}


# Function that return svn revision
function getSvnRevision() {
    # Arguments:
    #    $1: location of an svn repository (directory or URL)
	[[ $# -ne 1 ]] && echo "getSvnRevision: invalid number of arguments" >&2 && exit 1
    local svn_revision
    if [[ "$1" == *://* ]]; then
        svn_revision=$(LC_ALL=C svn info "$1" | sed -n 's/^Revision: *//p')
    else
        svn_revision=$(cd "$1" && LC_ALL=C git svn info 2>/dev/null | sed -n 's/^Revision: *//p')
        [[ -z "$svn_revision" ]] && svn_revision=$(LC_ALL=C svn info "$1" | sed -n 's/^Revision: *//p')
    fi
    echo $svn_revision
}

function checkout_git_svn_repository() {
    local svnremoteurl="$1"
    local lastrev=$(getSvnRevision "$svnremoteurl")
    echo "Getting history please wait ..."
    while read -r revision; do
        ((percent=(100 * $revision)/$lastrev))
        printf "\rGetting revision r%d / r%d (%d%%)" $revision $lastrev $percent
    done < <(git svn clone "$svnremoteurl" . 2>/dev/null | sed -nl 's/^r\([0-9]*\).*/\1/p')
    echo
}

# Function that checkout a svn repository into an svn or git-svn local repository
function checkout_repository() {
    local localdir="$1"
    local svnremoteurl="$2"
    local repotype="$3"
    case "$repotype" in
        svn)
             (cd "$localdir" && svn co "$svnremoteurl" "$localdir")
             ;;
        git)
             (cd "$localdir" && checkout_git_svn_repository "$svnremoteurl")
             ;;
        *) echo "Unknown repository type '$repotype" >&2
           exit 1
           ;;
    esac
    exit
}

function update_git_svn_repository() {
    # Check if we have pending commits
    local pending=$(git diff-index --name-only HEAD)
    # Check if we have untracked files
    #local untracked=$(git ls-files :/ --exclude-standard --others)
    #if [[ -z "$pending" && -z "$untracked" ]];then
    if [[ -z "$pending" ]];then
        local lastrev=$(getSvnRevision "$svnremoteurl")
        echo "Getting last history please wait ..."
        while read -r revision; do
            ((percent=(100 * $revision)/$lastrev))
            printf "\rGetting revision r%d / r%d (%d%%)" $revision $lastrev $percent
        done < <(git svn rebase 2>/dev/null | sed -nl 's/^r\([0-9]*\).*/\1/p')
        echo
    else
        # git svn fetch --all | grep '^r'
        echo
        echob "Local file(s) needs update not updating local repository"
        echob "Press any keyâ€¦"
        tput bel
        read
    fi
}

# Function that update an svn or git-svn local repository
function update_repository() {
    local localdir="$1"
    local repotype="$2"
    case "$repotype" in
        svn)
             (cd "$localdir" && svn up >/dev/null)
             ;;
        git)
             (cd "$localdir" && update_git_svn_repository)
             ;;
        *) echo "Unknown repository type '$repotype" >&2
           exit 1
           ;;
    esac
}
